
[{"content":"","date":"2025 年 7 月 31 日","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"2025 年 7 月 31 日","externalUrl":null,"permalink":"/tags/cv%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/","section":"Tags","summary":"","title":"CV(计算机视觉)","type":"tags"},{"content":"","date":"2025 年 7 月 31 日","externalUrl":null,"permalink":"/","section":"Eclipse","summary":"","title":"Eclipse","type":"page"},{"content":"","date":"2025 年 7 月 31 日","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"2025 年 7 月 31 日","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"2025 年 7 月 31 日","externalUrl":null,"permalink":"/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/","section":"Categories","summary":"","title":"计算机","type":"categories"},{"content":"","date":"2025 年 7 月 31 日","externalUrl":null,"permalink":"/tags/%E5%BC%80%E6%94%BE%E9%9B%86%E5%90%88%E7%9B%AE%E6%A0%87%E8%AF%86%E5%88%AB/","section":"Tags","summary":"","title":"开放集合目标识别","type":"tags"},{"content":"\r前言 #\r前些日期我去参加学院组织的暑期实践, 为期一个月. 期间从零开始学习了深度学习和图像识别技术, 最后部署了一下 AAAI'25 接收的一篇论文中的模型 LAE-DINO, 并在 LAE-1M 数据集中的部分图片和实践公司提供的卫星图片上简单测试了. 应该说因为专业不相关, 所以主要时间都花在学习深度学习知识上了, 没有做出什么实质性工作. 不过在使用(准确是说「玩」)这个模型的时候, 我发现了一个奇妙的现象, 因此记录于此.\nLAE-DINO #\rLAE-DINO 模型能检测遥感影像(Remote Sensing)对象, 基于 DINO (或者说应该是 Grounding DINO?) 设计. 其特点是「开放集合目标识别(Open-set Object Detection)」, 即在语言的提示下, 可以识别训练集中没出现的类别. 实际使用中, 我们需要给模型提供一条「提示词」, 把所有希望查询的类别拼成一个字符串, 例如 playground . road . tank . airplane . vehicle.\n模型是如何「认识」未知类别的呢? 简单来说就是通过语言. 人类可以把对象特征分解为几个「通用」特征的组合, 例如「百事 = 红 + 蓝 + 太极」, 这样即便人没见过百事, 如果以及知道后面三个特征, 依然可以从可口和百事中区分并选出百事可乐. 在模型中可能并不存在这么具体的分解过程, 但是语言模型学习到的特征确实有这种「组合」性质(可见 3b1b 的视频). 我对这类开放集合目标识别模型目前的理解就是: 通过交叉注意力机制等方式融合图像和文本特征, 让模型能认识图像更底层的「通用」特征, 这样就能靠描述来识别未知类别了.\n我不是人工智能专业的, 看过的模型也很少, 不太了解一般目标识别模型能达到怎样的水平. 不过在我看来, LAE-DINO 并不是一个出色的模型. 最初我使用官方提供的测试指令\npython demo/image_demo.py images/airplane.jpg \\ configs/lae_dino/lae_dino_swin-t_pretrain_LAE-1M.py \\ --weights /path/to/model/ \\ --texts \u0026#39;playground . road . tank . airplane . vehicle\u0026#39; -c \\ --palette random \\ --pred-score-thr 0.4 在测试集中的一张机场图片上推理, 推理结果上居然一个框都没有! 后面才发现是 $0.4$ 的 pred-score-thr 太高了, 下降一点就好了. 相比之下, 这篇论文更大的价值可能是给出了一个 LAE-1M 数据集. 但其实这个数据集也不是很好. 根据论文的说法, 这个数据集统合了目前的一些开源数据集, 如 DIOR, DOTA v2 等等. 对那些有精细标注的数据, 统一了数据格式; 而对没有精细标注, 只有图片-描述的数据集, 采用 Segment Anything + 语言模型的半自动标注工具, 标注图像中的部分目标. 但这个自动标注还有很大提升空间, 机场里的飞机都不能全部标出来, 质量有点低了. 后面我也看了 SAM 的数据标注过程, 可能目前这个时段, 想要获得高质量的标注, 找高质量的人是不可或缺的. 也正是如此, 感觉个人/小团体研究很难作出比大公司好的成果啊.\n发现 #\r虽然模型的初次使用效果很差, 但是也没有其他模型可用. 而且我手头也没有数据, 也还没有编写模型代码的经验, 不能自己设计. 所以我还是在这个模型上继续测试. 不能改架构, 那么能调整的就只有查询词和阈值了.\n我的第一个想法, 也是很容易想到的想法就是: 用相关的词能否增强查询效果? 在 LAE-DINO 的论文中提到, 他们会提取「场景特征(scene feature)」, 方法是将场景中相关的对象的特征加权平均, 例如 airport \u0026lt;- airplane + vehicle + .... 那么反过来, 如果提供很多同一场景的物品, 是否能激发模型的理解力? 而且 LAE-DINO 提取语言特征(text backbone)用的是 BERT 模型, 其提取语言特征用了 transformer 架构, 而 transformer 中重要的注意力机制就会考虑相邻词汇之间的联系. 所以这两者都启发我们, 用相关的词是可以增强效果的. 因此我尝试用多个近义词(如 car . vehicle . bus)代替单个词(如 vehicle)去查询, 并且避免一次查询多个类别的目标(例如避免官方例子中的那种提示词). 结论是效果确实有提升, 但是提升的不多.\n但随后的测试中, 由于一次拼写错误, 我发现了一个奇异的现象:\nbuilding\r... residential\r... residental\r","date":"2025 年 7 月 31 日","externalUrl":null,"permalink":"/posts/lae-dino-report/","section":"Posts","summary":"","title":"使用语言增强 LAE-DINO 模型检测卫星遥感图像效果 - 初探","type":"posts"},{"content":"","date":"2025 年 7 月 31 日","externalUrl":null,"permalink":"/tags/%E6%8F%90%E7%A4%BA%E8%AF%8Dprompt/","section":"Tags","summary":"","title":"提示词(prompt)","type":"tags"},{"content":"\reXile\n女朋友 ","date":"2025 年 7 月 29 日","externalUrl":null,"permalink":"/friends/","section":"Eclipse","summary":"","title":"Friends","type":"page"},{"content":"\r简介 #\r本文记录用 Github Pages + Hugo + Blowfish 搭建博客的重要事项. 大部分内容参考自网络上的博客, 以及 Hugo 和 Blowfish 的官方文档、教程.\n安装环境 #\r我使用的是 Windows 11 系统, 使用 Powershell 7.5.2.\n第一步要安装 Git 和 Hugo. Windows 现在提供了命令行工具 WinGet, 用它来安装软件包非常方便, 特别是可以免去「添加到 PATH」这一步. 和 linux 一样, 安装的指令往往都可以在软件官网直接找到, 例如安装 Git for Windows 的指令是\nwinget install --id Git.Git -e --source winget 安装 Hugo 的指令是\nwinget install Hugo.Hugo.Extended 如此安装后, Hugo 会自动添加到 PATH 里, 所以可以直接用\nhugo version 检查是否安装成功.\n创建本地站点 #\r在 Powershell 中, 输入\nhugo new site \u0026lt;site-name\u0026gt; 可以新建一个 Hugo 项目, 文件结构如下:\n\u0026lt;site-name\u0026gt;\r├─archetypes\r├─assets\r├─content\r├─data\r├─i18n\r├─layouts\r├─static\r└─themes 接下来需要安装主题. 我采用的是 Blowfish 主题, 安装命令是\ncd mywebsite git init -b main git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish 安装后, Blowfish 主题文件会存放在 theme 文件夹下.\n\u0026lt;site-name\u0026gt;\r├─archetypes\r├─assets\r├─content\r├─data\r├─i18n\r├─layouts\r├─static\r└─themes\r└─blowfish\r├─archetypes\r├─assets\r│ ├─...\r├─config\r│ └─_default\r├─data\r├─exampleSite\r│ ├─...\r├─i18n\r├─images\r├─layouts\r│ ├─...\r├─release-versions\r└─static 其中 exampleSite 是 Blowfish 官网同款网站, 可以用来体验和学习.\n接下来需要把 themes\\blowfish\\config 移动到 \u0026lt;site-name\u0026gt; 目录下, 并删除 \u0026lt;site-name\u0026gt; 目录下原来的 hugo.toml 文件, 用 Blowfish 主题的配置代替默认主题. 然后可以复制 theme\\blowfish\\archetypes 中的文件, 替换 \u0026lt;site-name\u0026gt;\\archetypes 中的文件. 这些 md 文件是模板, 创建新页面时会用到.\n接下来打开 config\\_default\\hugo.toml, 在开头会看到\n# -- Site Configuration -- # Refer to the theme docs for more details about each of these parameters. # https://blowfish.page/docs/getting-started/ # theme = \u0026#34;blowfish\u0026#34; # UNCOMMENT THIS LINE # baseURL = \u0026#34;https://your_domain.com/\u0026#34; defaultContentLanguage = \u0026#34;en\u0026#34; 把 theme = ... 和 baseURL = ... 取消注释. 前者会应用 Blowfish 主题, 后者则是网站的 url, 如果是用 Github Pages, 可以改成对应的 url, 即 https://\u0026lt;github-username\u0026gt;.github.io.\n至此就可以测试网站了, 在 \u0026lt;site-name\u0026gt; 目录下运行\nhugo server 运行后命令行中会显示\n...\rEnvironment: \u0026#34;development\u0026#34;\rServing pages from disk\rRunning in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender\rWeb Server is available at http://localhost:1313/ (bind address 127.0.0.1)\rPress Ctrl+C to stop 用其中给出的 http://localhost:1313/ 即可预览. 按 Ctrl+C 停止预览. 此外, 这个预览会实时更新, 即若改变了本地文件, 网页会自动刷新并更新, 同时, 如果本地文件中出现了错误, 那么预览处也能看到哪里有问题.\n站点配置 #\r待续\n发布 #\rGithub Page 是静态网页托管平台, 所以需要先用 Hugo 生成静态网站, 再推送到 Github 仓库.\n首先在 \u0026lt;site-name\u0026gt; 目录下执行\nhugo 生成静态网站. 其会生成在 \u0026lt;site-name\u0026gt;\\public 文件夹下. 接下来只需要上传此文件夹即可. 即\ncd public git init -b main git remote add origin \u0026lt;your repo.git here\u0026gt; git pull --rebase origin main 从远程仓库拉取, 再\ngit add . 添加本体所有文件. 如果这一步 git 有警告(warning), 提示内容是 ... LF will be replaced by CRLF ..., 则需要特殊处理一下. 具体原理和处理方案可见此处. 简单来说就是 Windows 和 Unix 换行处理不同, 导致某个 SHA256 属性不匹配. 解决方案就是先执行(只需执行一次, 会永久改变)\ngit config --global core.autocrlf false 清理掉之前生成的 public 内容, 重新执行上述 Hugo 和 Git 操作. git add . 之后, 就可以推送到远程了\ngit commit -m \u0026#34;[your comment here]\u0026#34; git push origin main 至此, 可以在 https://\u0026lt;github-username\u0026gt;.github.io 看到博客了(可能需要等几秒钟才会生效). 之后添加了内容之后, 用 Git 推送即可.\n参考资料 #\rHugo Documentation\nBlowfish 中文文档\n如何使用 Github Page 搭建自己的博客\n解决Hugo无法加载css文件\n","date":"2025 年 7 月 29 日","externalUrl":null,"permalink":"/posts/hugo-config/","section":"Posts","summary":"","title":"Hugo + Blowfish 博客配置","type":"posts"},{"content":"写这第一篇文章时，让我想起了一个词：『创刊号』。\n这个词是我在氷菓里面看到的。第一次看到时，我还不知道这个词是什么意思。因为原文说『没有创刊号』，所以我以为创刊号是类似图书 ISBN 序列号的东西。望文生义，就觉得是『创立刊物时获得的编号』。后来，我也忘记有没有特意查过这个词，大概是没有吧，但是我还是明白了这个词的真正含义『刊物的第一期』。因为后面的剧情就是，虽然找到了社刊，但是唯独没有第一期。我想我是看过剧情并理解了这一点之后，明白了创刊号的意思。\n","date":"2025 年 7 月 28 日","externalUrl":null,"permalink":"/posts/my-first-post/","section":"Posts","summary":"","title":"My First Post","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]